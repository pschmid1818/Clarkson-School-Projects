---- problem 1
sat 
(model  
  ;; universe for A: 
  ;;   A!val!0 A!val!2 A!val!4 A!val!1 A!val!3 A!val!5  
  ;; ----------- 
  ;; definitions for universe elements: 
  (declare-fun A!val!0 () A) 
  (declare-fun A!val!2 () A) 
  (declare-fun A!val!4 () A) 
  (declare-fun A!val!1 () A) 
  (declare-fun A!val!3 () A) 
  (declare-fun A!val!5 () A) 
  ;; cardinality constraint: 
  (forall ((x A)) 
          (or (= x A!val!0) 
              (= x A!val!2) 
              (= x A!val!4) 
              (= x A!val!1) 
              (= x A!val!3) 
              (= x A!val!5))) 
  ;; -----------                                                    <- That part means vvv
  (define-fun M ((x!0 A) (x!1 A)) bool                              ; define function M(x0, x1) 
    (let ((a!1 (ite (= x!0 A!val!5)                                     ; function a1(x0): 5 ->
                    A!val!5                                                 ; 5
                    (ite (= x!0 A!val!0)                                    ; 0 ->
                         A!val!0                                            ; 0
                         (ite (= x!0 A!val!2) A!val!2 A!val!1))))           ; 2 -> 2, else -> 1 (1 -> 1, 3 -> 1, 4 -> 1)
          (a!2 (ite (= x!1 A!val!3)                                     ; function a2(x1): 3 ->
                    A!val!3                                                 ; 3 
                    (ite (= x!1 A!val!0)                                    ; 0 ->
                         A!val!0                                            ; 0
                         (ite (= x!1 A!val!4) A!val!4 A!val!1)))))          ; 4 -> 4, else -> 1 (1 -> 1, 3 -> 1, 4 -> 1)
                                                                        ; given that x!0 -> a1 and x!1 -> a2
      (or (and (= a!1 A!val!2) (= a!2 A!val!4))                         ; M output: M(2 -> 2, 4 -> 4) (M(2,4)) 
          (and (= a!1 A!val!2) (= a!2 A!val!3))                             ; M(2 -> 2, 3 -> 3) (M(2,3))
          (and (= a!1 A!val!5) (= a!2 A!val!0))                             ; M(5 -> 5, 0 -> 0) (M(5,0))
          (and (= a!1 A!val!0) (= a!2 A!val!1)))))                          ; M(0 -> 0, 1 -> 1) M(0 -> 0, 1 -> 2) M(0 -> 0, 1 -> 5) 
)                                                                               ; M(0, 1), M(0,2) M(0,5)

                                                                            ; 0 -> (1, 2 -> (4, 3), 5 -> 0)
                                                                            ; 0 is mother of 5 and 5 is mother of 0!

---- problem 2
sat 
(model  
  ;; universe for A: 
  ;;   A!val!0 A!val!2 A!val!4 A!val!1 A!val!3 A!val!5  
  ;; ----------- 
  ;; definitions for universe elements: 
  (declare-fun A!val!0 () A) 
  (declare-fun A!val!2 () A) 
  (declare-fun A!val!4 () A) 
  (declare-fun A!val!1 () A) 
  (declare-fun A!val!3 () A) 
  (declare-fun A!val!5 () A) 
  ;; cardinality constraint: 
  (forall ((x A)) 
          (or (= x A!val!0) 
              (= x A!val!2) 
              (= x A!val!4) 
              (= x A!val!1) 
              (= x A!val!3)
              (= x A!val!5))) 
  ;; -----------                                                                    <- this part means vvv
  (define-fun ann () A                                                              ; function ann ->
    A!val!5)                                                                            ; 5
  (define-fun M ((x!0 A) (x!1 A)) bool                                              ; function M(x0, x1)
    (let ((a!1 (ite (= x!0 A!val!1)                                                     ; function a1(x0): 1 -> 
                    A!val!1                                                                 ; 1
                    (ite (= x!0 A!val!4)                                                    ; 4 ->
                         A!val!4                                                            ; 4
                         (ite (= x!0 A!val!5) A!val!5 A!val!2))))                           ; 5 -> 5, else -> 2 (0 -> 2, 2 -> 2, 3 -> 2)
          (a!3 (ite (= x!1 A!val!1)                                                     ; function a3(x1): 1 -> 
                    A!val!1                                                                 ; 1
                    (ite (= x!1 A!val!4)                                                    ; 4 -> 
                         A!val!4                                                            ; 4
                         (ite (= x!1 A!val!5) A!val!5 A!val!2)))))                          ; 5 -> 5, else -> 2 (0 -> 2, 2 -> 2, 3 -> 2)
    (let ((a!2 (ite (= x!0 A!val!0) A!val!0 (ite (= x!0 A!val!3) A!val!3 a!1)))         ; function a2(x0): (all map to self)
                                                                                            ; 0 -> 0, 3 -> 3, else -> itself 
                                                                                                ; 1 -> 1, 2 -> 2, 4 -> 4, 5 -> 5
          (a!4 (ite (= x!1 A!val!0) A!val!0 (ite (= x!1 A!val!3) A!val!3 a!3))))        ; function a4(x1): (all map to self)
                                                                                            ; 0 -> 0, 3 -> 3, else -> itself 
                                                                                                ; 1 -> 1, 2 -> 2, 4 -> 4, 5 -> 5
                                                                                        ; given M(a2(x0), a4(x1)) (all map to self)
    (or (and (= a!2 A!val!5) (= a!4 A!val!2))                                               ; M(5,2)    
          (and (= a!2 A!val!5) (= a!4 A!val!0))                                             ; M(5,0)
          (and (= a!2 A!val!2) (= a!4 A!val!3))                                             ; M(2,3)
          (and (= a!2 A!val!2) (= a!4 A!val!4))                                             ; M(2,4)
          (and (= a!2 A!val!0) (= a!4 A!val!1))))))                                         ; M(0,1)

    (define-fun age ((x!0 A)) Int                                                   ; function age(x0)
        (let ((a!1 (ite (= x!0 A!val!1)                                                 ; function a1(x0): 1 ->
                        A!val!1                                                             ; 1
                        (ite (= x!0 A!val!4)                                                ; 4 -> 
                            A!val!4                                                         ; 4
                            (ite (= x!0 A!val!5) A!val!5 A!val!2)))))                       ; 5 -> 5, else -> 2 (0 -> 2, 2 -> 2, 3 -> 2)
        (let ((a!2 (ite (= x!0 A!val!0) A!val!0 (ite (= x!0 A!val!3) A!val!3 a!1))))    ; function a2(x0):
                                                                                            ; 0 -> 0, 3 -> 3 else -> self
                                                                                                ; 1 -> 1, 2 -> 2, 4 -> 4, 5-> 5
        (let ((a!3 (ite (= a!2 A!val!2)                                                 ; function a3(a2(x0)) 2 ->
                        4                                                                   ; (int) 4
                        (ite (= a!2 A!val!1) 1 (ite (= a!2 A!val!0) 2 14)))))               ; 1 -> (int) 1 0 -> (int) 2, else -> (int) 14 (ignore)
        (ite (= a!2 A!val!5) 5 (ite (or (= a!2 A!val!3) (= a!2 A!val!4)) 3 a!3))))))    ; 5 -> (int) 5, 3 -> (int) 3, 4 -> (int) 3
) 
                                                                                            ; 5(ann)->(2->(3,4),0->(1))
                                                                                            ; Person^ agev
                                                                                            ; 5        4   3 3  2   1

---- problem 3
unsat
(supermother nomothers)       ; because person 5 (ann) has no mother only case :nomother is true

--- problem 4
unknown -> infinate model (technically, there is an answer, z3 just cant solve it)