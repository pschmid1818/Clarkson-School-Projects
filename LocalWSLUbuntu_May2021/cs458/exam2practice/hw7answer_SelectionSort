predicate sorted(A: array<int>, i: int, j: int)
reads A
{forall k :: 0 <= i <= k < j < A.Length ==> A[k] <= A[k+1] }

predicate all_smaller(A: array<int>, a: int, b: int, c: int)
reads A
{forall i :: 0 <= a <= i <= b < A.Length && 0 <= c < A.Length ==> A[i] <= A[c]}

//lynch code
method MaxIndex(A: array<int>, size: nat) returns(r: nat)
requires 0 < size <= A.Length
ensures all_smaller(A,0,size-1,r)
ensures 0 <= r < A.Length
{
  r := 0;
  var i := 1;
  while i < size
  invariant 0 <= r < i <= size
  invariant all_smaller(A,0,i-1,r)
  {
    if A[r] < A[i]
    {
		r:= i;
    }
    i := i + 1;
  }
  return r;
}

method SelectionSort(A: array<int>)
requires A.Length > 0
modifies A
ensures sorted(A,0,A.Length-1)
ensures multiset(A[..]) == multiset(old(A[..]))
{
  var i := A.Length;
  var m;
  while i >= 2
  invariant 1 <= i < A.length
  invariant sorted(A,i,A.Length-1)
  invariant all_smaller(A,0,i-1,i)
  ensures multiset(A[..]) == multiset(old(A[..])
  {
    m := MaxIndex(A,i);
    A[i-1],A[m] := A[m],A[i-1];
    i := i - 1;
  }
}







