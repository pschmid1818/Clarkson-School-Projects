Full Credit 	Question 1: 
				For the following program, show what woudl result from bubbling up the postcondition.

				method diff(x0: int, y: int)
				requires x0 > 0
				ensures r > 0
				{
					var x := x0;
					if(x <= y)
					{
						x := x + y;
					}
					return x - y;
				}
				requires x0 > 0

				----- If true
					[x0 > 0  ->  x0 <= y  ->  (x0+y)-y > 0]
				assume x0 > 0
					[x0 <= y  ->  (x0+y)-y > 0]
				x := x0
					[x <= y  ->  (x+y)-y > 0]
				assume x <= y
					[(x+y)-y > 0]
				x := x+y
					[x-y > 0]
				r := x-y
					[r > 0]
					
				----- If False
					[x0 > 0  ->  x0 > y  ->  x0-y > 0]
				assume 
					[x0 > y  ->  x0-y > 0]
				x := x0
					[x > y  ->  x-y > 0]
				assume x > y
					[x-y > 0]
				r := x - y
					[r > 0]
	
---------------------------------------------------------------------------------------------------------------------------------

1 error, 		Question 2: 
assume if 		For the following program
statement true		A.  Give a useful postcondition.
in var -> ens		B.  Give a loop invariant.
					C.  Give a variant used to show the loop terminates.
					D.  Show all the paths in the program, and the code along each path.
					
				method f(n: int) returns (r: int)
				requires n > 5
				ensures r = 2*(n-5)
				{
					var i := 0;
					var c := 0;
					while i < n
					invariant 0 <= i <= n 
					invariant i < 5 ==> c == 0
					invariant i >= 5 ==> c = 2*(i-5)
					{
						if i >= 5				//because of if, 2 invariants needed
						{
							c := c + 2;
						}
						i := i + 1;
					}
					return c;
				}

				n = 9  n = 9  ...  n = 9  n = 9  n = 9  n = 9  n = 9
				c = 0  c = 0  ...  c = 0  c = 2  c = 4  c = 6  c = 8
				i = 0  i = 1  ...  i = 5  i = 6  i = 7  i = 8  i = 9 break (i = n)

				req -> inv
				----------
				assume n > 5
				i := 0
				c := 0
				[0 <= i <= n && i < 5 ==> c == 0 && i >= 5 ==> c = 2*(i-5)]

				inv -> inv
				---------- if true
				assume 0 <= i <= n && i < 5 ==> c == 0 && i >= 5 ==> c = 2*(i-5)
				assume i >= 5
				c := c + 2;
				i := i + 1;
				[0 <= i <= n && i < 5 ==> c == 0 && i >= 5 ==> c = 2*(i-5)]

				inv -> inv
				---------- if false
				assume 0 <= i <= n && i < 5 ==> c == 0 && i >= 5 ==> c = 2*(i-5)
				assume i < 5
				i := i + 1;
				[0 <= i <= n && i < 5 ==> c == 0 && i >= 5 ==> c = 2*(i-5)]

				inv -> ens
				----------
				assume 0 <= i <= n && i < 5 ==> c == 0 && i >= 5 ==> c = 2*(i-5)
				//assume i >= 5
				r := c
				[r = 2*(n-5)]

---------------------------------------------------------------------------------------------------------------------------------

5 wrong:		Question 3a:
ensure >=0		This method passes an array of integers and the size of the array as parameters, where size could be less than the actual length.  
invariant >=0	It modifies the array so that every element is replaced by its absolute value.  You need to verify that this works correctly.  
				Don't forget that you sometimes have to specify that things have not changed.
invariant			A.   Give preconditions
check for			B.   Give postconditions
changes after i		C.   Give loop invariants

forall for		method abs(A: array<int>, size: nat)
the invariants	modifies A
too				require 0 < size <= A.Length
				ensure forall x :: 0 <= x < size ==> A[x] > 0  									//A[x] >= 0
				ensure forall x :: 0 <= x < size ==> A[x] == old(A[x]) || A[x] == -old(A[x])
				{
				  var i := 0;
					while i < size
					invariant 0 <= i <= size
					invariant A[i] > 0															//forall x :: 0 <= x < i ==> A[x] >= 0
					invariant A[i] == old(A[i]) || A[i] == -old(A[i])							//forall x :: 0 <= x < i ==> A[x] == old(A[x]) || A[x] == -old(A[x])
																								//invariant forall x :: i < x < size ==>  A[x] == old(A[x])
					{
						if (A[i] < 0) 
					{
							A[i] := -A[i];
						}
					i := i + 1;
					}
				}

---------------------------------------------------------------------------------------------------------------------------------

2 error:		Question 3b:
j from 0 -> i 	This method takes an array of integers and returns true if the array contains a duplicate.  
->j -> A.Length		A.   Give preconditions
					B.   Give postconditions
no need for			C.   Give loop invariants
2 variables
only checking	method Duplicate(A: array<int>) returns(r: bool)
against A[i]	require A.Length >= 2
				ensure r == exists x,y :: 0 <= x < y < A.Length ==> A[x] == A[y]
				{
				  var i := 0;
				  var j;
				  while i < A.Length
				  invariant 0 <= i <= A.Length
				  //what is known for all points on this loop?
					//still no duplicates
					//checked from 0 -> i-1
				  invariant forall x,y :: 0 <= x < y < i ==> A[x] != A[y]
				  {
					j := i + 1;
					while j < A.Length
					invariant i <= j <= A.Length								//0 <= i <= j <= A.Length
					//what is known for all points on this loop?
						//still no duplicates
						//checked from i -> j
					invariant forall x,y :: i <= x < y < j ==> A[x] != A[y]		//forall x :: i <= x < j ==> A[x] != A[i]
					{
					  if A[i] == A[j]
					  {
						return true;
					  }
					  j := j + 1;
					}
					i := i + 1;
				  }
				  return false;
				}

---------------------------------------------------------------------------------------------------------------------------------

Full Credit		Question 3c: (Will not have a question this hard on test)
				This method sorts an array of integers using the Selection Sort algorithm  
				It calls another method called MaxIndex which returns the index of the largest number in an array.  
				You need to verify both methods.  
				I have given predicates sorted and all_smaller, which we talked about in class.  
				The predicate all_smaller applies in the special case of partitioned where there is only one element in the second part.  
				Feel free to use my predicates.
					A.   Give preconditions
					B.   Give postconditions
					C.   Give loop invariants

				predicate sorted(A: array<int>, i: int, j: int)
				reads A
				{forall k :: 0 <= i <= k < j < A.Length ==> A[k] <= A[k+1] }

				predicate all_smaller(A: array<int>, a: int, b: int, c: int)
				reads A
				{forall i :: 0 <= a <= i <= b < A.Length && 0 <= c < A.Length ==> A[i] <= A[c]}

				method MaxIndex(A: array<int>, size: nat) returns(r: nat)
				require 1 < size <= A.Length
				ensure all_smaller(A, 0, size-1, r) 
				{
				  r := 0;
				  var i := 1;
				  while i < size
				  invariant 1 <= i <= size
				  invariant all_smaller(A, 0, i-1, r)
				  {
					if A[r] < A[i]
					{
						r:= i;
					}
					i := i + 1;
				  }
				  return r;
				}

				method SelectionSort(A: array<int>)
				modifies A
				requires 1 < A.Length
				ensures sorted(A, 0, A.Length-1)
				ensures multisort(A[..]) == multisort(old(A[..]))
				{
				  var i := A.Length;
				  var m;
				  while i >= 2
				  invariant A.Length >= i >= 1
				  //what is known for all points on this loop? 
					//all points from A[A.Length-1] to A[i] are sorted
					//no values has been changed, added, or removed in A
				  invariant all_smaller(A, i-1, A.Length-1, i)
				  invariant multisort(A[..]) == multisort(old(A[..]))
				  {
					m := MaxIndex(A,i);
					A[i-1],A[m] := A[m],A[i-1];
					i := i - 1;
				  }
				}









