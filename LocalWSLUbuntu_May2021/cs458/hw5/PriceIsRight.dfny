// The correct_guess predicate takes four parameters:
// the two guesses, the correct price, and the value the function returns.
// Inside the curly braces should be a logical statetment that evaluates
// to true if the function returns the correct value, and false if it doesn't.
// TODO: The body of the predicate now says "true". Please modify it appropriately. 

// I leaned that both contestants win if they guess the same and lower than price 
// https://www.quora.com/What-would-happen-on-The-Price-Is-Right-if-both-contestants-tied-and-won-both-showcases
predicate correct_guess(guess1: int, guess2: int, price: int, r: int)
{r <= price}

//---------------------------------------------------------------------------------------+
//-------------------------------------------------------------------------------------+ |
// All the following functions take three parameters:                                  | |
// the two guesses and the correct price.                                              | |
// The intention is to return the value required by the assignment.                    | |
// They may or may not be correct.                                                     | |
// DONE: Do not change the first three functions.                                      | |
// TODO: Modify the body of the fourth function to make it work propoerly.             | |
//-------------------------------------------------------------------------------------+ |
//---------------------------------------------------------------------------------------+

// Number of paths through guess_price1:
// 3 {guess1 || guess2 > best, guess1 & guess2 < best, guess1 > guess2, guess1 & guess2 < best, guess1 < guess2}
// Values for which guess_price1 returns the wrong answer:
// guess1 = 7, guess2 = 15, price = 10, r = -1
// Result of bubbling up postcondition for path taken by above values:
// 7 > 10 && 15 < 10, best = -1  ->  r = -1  ->  return false

method guess_price1(guess1: int, guess2: int, price: int) returns (r: int)
requires guess1 > 0 && guess2 > 0 && price > 0
ensures correct_guess(guess1, guess2, price, r)
{
    var best;

    if guess1 <= price && guess2 <= price
    {
        best := guess1;
        if guess2 > best
        {
            best := guess2;
        }
    }
    else 
    {
        best := -1;
    }

    return best;
}

//----------------------------------------------------------------------------------------

// Number of paths through guess_price2:
// 4 {guess1 > guess2 && guess1 < best, guess1 > guess2 && guess1 > best, guess1 < guess2 && guess2 < best, guess1 < guess2 && guess2 > best}
// Values for which guess_price2 returns the wrong answer:
// guess1 = 7, guess2 = 15, price = 10, r = -1
// Result of bubbling up postcondition for path taken by above values:
// best = 7  ->  15 > 7, best = 15  ->  best > 10, r = -1  ->  return false

method guess_price2(guess1: int, guess2: int, price: int) returns (r: int)
requires price > 0 && guess1 > 0 && guess2 > 0
ensures correct_guess(guess1, guess2, price, r)
{
    var best := guess1;

    if guess2 > best
    {
        best := guess2;
    }

    if best <= price
    {
        return best;
    }
    else
    { 
        return -1;
    }
}

//----------------------------------------------------------------------------------------

// Number of paths through guess_price3:
// 3 {guess1 && guess2 > best, guess1 & guess2 < best, guess1 > guess2, guess1 & guess2 < best, guess1 < guess2}
// Values for which guess_price3 returns the wrong answer:
// guess1 = 7, guess2 = 15, price = 10, r = 15
// Result of bubbling up postcondition for path taken by above values:
// 7 < 10, best = 7  ->  15 > 7, best = 15  ->  r = 15  ->  return false

method guess_price3(guess1: int, guess2: int, price: int) returns (r: int)
requires price > 0 && guess1 > 0 && guess2 > 0
ensures correct_guess(guess1, guess2, price, r)
{
    var best;
 
    if guess1 <= price || guess2 <= price
    {
        best := guess1;
        if guess2 > best
        {
            best := guess2;
        }
    }
    else 
    {
        best := -1;
    }

    return best;
}

//----------------------------------------------------------------------------------------

method guess_price4(guess1: int, guess2: int, price: int) returns (r: int)

requires price > 0 && guess1 > 0 && guess2 > 0
ensures correct_guess(guess1, guess2, price, r)

{
    var best;
    best := -1;

    if guess1 <= price {
        best := guess1;

        //guesses can be equal and both parties win
        if guess2 >= best && guess2 <= price{
            best := guess2;
        }
    }
    else if guess2 <= price {
        best := guess2;
    }

    return best;
}